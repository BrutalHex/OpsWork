name: Terraform
on:
  push:
    branches:
      - main
env:
  TERRAFORM_WORKING_DIR: './infra' 



permissions:
  contents: read
  pages: write
  id-token: write


jobs:
  terraform:
    runs-on: ubuntu-latest

    steps:
    - name: Checkout repository
      uses: actions/checkout@v2

    - name: Configure AWS Credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

    - name: Install jq
      run: sudo apt-get install jq

    - name: Set up Python
      uses: actions/setup-python@v2
      with:
        python-version: 3.8

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.3.6

    - name: Set up Helm
      uses: azure/setup-helm@v1
      with:
        version: '3.10.3'


    - name: Set up Helm config
      run: |
         mkdir -p $HOME/.helm/repository
         echo -e "apiVersion: v1\nrepositories: []" > $HOME/.helm/repository/repositories.yaml

    
    - name: Set up kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt

    - name: Run Python script
      run: |
        python init_backend.py

    - name: Terraform fmy
      run: terraform fmt -write=true -recursive
      working-directory: ${{env.TERRAFORM_WORKING_DIR}}
 

    - name: Terraform ini without backend
      run: terraform init -backend=false
      working-directory: ${{env.TERRAFORM_WORKING_DIR}}
 

    - name: Terraform validate
      run: terraform validate -json -no-color
      working-directory: ${{env.TERRAFORM_WORKING_DIR}}

    - name: Terraform init
      run: terraform init  
      working-directory: ${{env.TERRAFORM_WORKING_DIR}}

    - name: Terraform apply
      run: terraform apply -auto-approve  
      working-directory: ${{env.TERRAFORM_WORKING_DIR}}

   
    - name: Set output value as environment variable
      run: | 
        echo "CLUSTER_NAME=$(terraform-bin -chdir=./infra output cluster_name)" >> $GITHUB_ENV 
        echo "REGION=$(terraform-bin -chdir=./infra output region)" >> $GITHUB_ENV 
        echo "CLUSTER_ROLE=$(terraform-bin -chdir=./infra output cluster_role)" >> $GITHUB_ENV 

    - name: Set kubectl
      run: | 
        aws eks --region ${{env.REGION}} update-kubeconfig --name ${{env.CLUSTER_NAME}}

    - name: Add Helm repositories
      run: |
        helm repo add istio https://istio-release.storage.googleapis.com/charts
        helm repo add eks https://aws.github.io/eks-charts
        helm repo update

    - name: install istio
      run: |
        helm upgrade --install istio-base istio/base -n istio-system --create-namespace
        helm upgrade --install istiod istio/istiod -n istio-system
 


    - name: label default for istio
      run: |
        kubectl label namespace default istio-injection=enabled


    - name: install aws load balancer
      run: |
        helm upgrade --install aws-load-balancer-controller eks/aws-load-balancer-controller -n kube-system --set clusterName=${{env.CLUSTER_NAME}}

    - name: install locl chart "base"
      run: |
        helm upgrade --install base ./services/base --timeout=10m --wait --set cluster.roleArn=${{env.CLUSTER_ROLE}} --set cluster.name=${{env.CLUSTER_NAME}}


    - name: install argocd
      env:
        SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
        AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
        AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        AWS_REGION: ${{ secrets.AWS_REGION }}
      run: |
        helm upgrade --install argocd ./services/argocd --namespace argocd --set privatekey="$(echo -n $prv | base64 -w0)" --create-namespace --set extraEnv.AWS_REGION="$AWS_REGION" --set extraEnv.AWS_ACCESS_KEY_ID="$AWS_ACCESS_KEY_ID" --set extraEnv.AWS_SECRET_ACCESS_KEY="$AWS_SECRET_ACCESS_KEY"

